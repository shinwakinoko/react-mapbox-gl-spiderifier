import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';
import _ from 'lodash';
import MapboxGl from 'mapbox-gl';
import { checkPropsChange } from 'ComponentUtilities';

class MarkerLayer extends Component {
	static contextTypes = {
		map: PropTypes.object,
	};

	componentDidMount() {
		const node = this.attachChildren(this.props);
		this.layer = new MapboxGl.Marker(node)
			.setLngLat(this.props.coordinates)
			.addTo(this.context.map);
	}

	componentWillReceiveProps(nextProps) {
		if (nextProps.coordinates !== this.props.coordinates) {
			this.layer.setLngLat(nextProps.coordinates);
		}
    if (nextProps.children !== this.props.children ||
        checkPropsChange(this.props, nextProps, ['style', 'className'])
    ) {
			this.attachChildren(nextProps);
		}
	}

	componentWillUnmount() {
		this.layer.remove();
		delete this.layer;
	}

	attachChildren(props = this.props) {
		const { children } = props;

		if (children) {
			if (!this.element) {
				this.element = document.createElement('div');
			} else {
				this._unbindEvents();
			}

			const style = this.getStyle(this.props);
			this.element.className = this.getContainerClassName(props);
			Object.keys(style).forEach(s => {
				this.element.style[s] = style[s];
			});
			this._bindEvents();

			const content = this.getContent(props);
			ReactDOM.render(content, this.element);
		}

		return this.element;
	}

	getContainerClassName(props) {
		return `mapboxgl-marker ${props.className}`;
	}

	getContent(props) {
		const { children } = props;
		return <div className="nio-marker-content f-width f-height">{children}</div>;
	}

	getProperties() {
		return this.props.properties;
	}

	getStyle(props) {
		return _.clone(props.style) || {};
	}

	_bindEvents() {
		this.element.addEventListener('mousedown', this._disableMapDragPan);
		this.element.addEventListener('mouseup', this._enableMapDragPan);
	}

	_disableMapDragPan = () => {
		const { map } = this.context;
		if (map) {
			map.dragPan.disable();
		}
	};

	_enableMapDragPan = () => {
		const { map } = this.context;
		if (map) {
			map.dragPan.enable();
		}
	};

	_unbindEvents() {
		this.element.removeEventListener('mousedown', this._disableMapDragPan);
		this.element.removeEventListener('mouseup', this._enableMapDragPan);
	}

	render() {
		return null;
	}
}

MarkerLayer.displayName = 'MarkerLayer';

MarkerLayer.propTypes = {
	/**
	 * (required): [number, number] Display the Marker at the given position
	 */
	coordinates: PropTypes.array.isRequired,

	/**
	 * Properties of each Marker, will be passed back when events trigged
	 */
	properties: PropTypes.oneOfType([
		PropTypes.array.isRequired,
		PropTypes.object.isRequired,
		PropTypes.string.isRequired,
	]),

	/**
	 * Apply the className to the container of the Marker
	 */
	className: PropTypes.string,

	/**
	 * Apply style to the Marker container
	 */
	style: PropTypes.object,

	/**
	 * Child node(s) of the component, to be rendered as custom Marker
	 */
	children: PropTypes.oneOfType([
		PropTypes.node,
		PropTypes.arrayOf(PropTypes.node),
	]),
};

export default MarkerLayer;
